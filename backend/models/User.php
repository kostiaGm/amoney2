<?php

namespace backend\models;

use Yii;

/**
 * This is the model class for table "user".
 *
 * @property integer $id
 * @property string $username
 * @property string $auth_key
 * @property string $password_hash
 * @property string $password_reset_token
 * @property string $email
 * @property integer $status
 * @property integer $created_at
 * @property integer $updated_at
 * @property string $lastname
 * @property string $patronymic
 * @property string $photo
 * @property string $birthday
 * @property integer $passportSeria
 * @property integer $passportNumber
 * @property string $passportInfo
 * @property string $passportDate
 * @property integer $inn
 * @property string $address
 * @property string $phone1
 * @property string $phone2
 * @property string $phone3
 * @property string $role
 */
class User extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public $password;
    public $passwordConfirm;


    public static function tableName()
    {
        return 'user';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {

        return [
            [['username', 'email'], 'required'],
            [['status', 'created_at', 'updated_at', 'passportSeria', 'passportNumber', 'inn'], 'integer'],
            [['birthday', 'passportDate', 'photo'], 'safe'],
            [['passportInfo', 'address', 'role'], 'string'],
            [['username', 'password_hash', 'password_reset_token', 'email', 'lastname', 'patronymic',  'phone1', 'phone2', 'phone3'], 'string', 'max' => 255],
            [['auth_key'], 'string', 'max' => 32],
            [['password', 'passwordConfirm'], 'string', 'min' => 8, 'max'=>255],
            [['username'], 'unique'],
            [['email'], 'unique'],
            [['password_reset_token'], 'unique'],
            [['password'], 'passwordRules'],
            [['passwordConfirm'], 'passwordRules'],
            [['photo'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg, jpeg, gif'],
        ];
    }

    public function passwordRules()
    {
        if (empty($this->password_hash)) {
            if (empty($this->password)) {
                $this->addError('password', Yii::t('app', 'Password can not be blank'));
                return false;
            }

            if (empty($this->passwordConfirm)) {
                $this->addError('passwordConfirm', Yii::t('app', 'Password Confirm can not be blank'));
            }

            if ($this->passwordConfirm != $this->password) {
                $this->addError('passwordConfirm', Yii::t('app', 'Passwords match'));
            }
        }

    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'username' => Yii::t('app', 'Username'),
            'auth_key' => Yii::t('app', 'Auth Key'),
            'password_hash' => Yii::t('app', 'Password Hash'),
            'password_reset_token' => Yii::t('app', 'Password Reset Token'),
            'email' => Yii::t('app', 'Email'),
            'status' => Yii::t('app', 'Status'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
            'lastname' => Yii::t('app', 'Lastname'),
            'patronymic' => Yii::t('app', 'Patronymic'),
            'photo' => Yii::t('app', 'Photo'),
            'birthday' => Yii::t('app', 'Birthday'),
            'passportSeria' => Yii::t('app', 'Passport Seria'),
            'passportNumber' => Yii::t('app', 'Passport Number'),
            'passportInfo' => Yii::t('app', 'Passport Info'),
            'passportDate' => Yii::t('app', 'Passport Date'),
            'inn' => Yii::t('app', 'Inn'),
            'address' => Yii::t('app', 'Address'),
            'phone1' => Yii::t('app', 'Phone1'),
            'phone2' => Yii::t('app', 'Phone2'),
            'phone3' => Yii::t('app', 'Phone3'),
            'role' => Yii::t('app', 'Role'),
        ];
    }

    /**
     * @inheritdoc
     * @return UserQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new UserQuery(get_called_class());
    }

    public function afterFind()
    {


        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function upload()
    {
        if (isset($this->photo)  && $this->validate()) {

            $fileName = 'user-photo-'.uniqid() . '.' . $this->photo->extension;

            $this->photo->saveAs(Yii::getAlias('@frontend').'/web/uploads/' . $fileName);
            $this->photo = $fileName;
            return true;
        } else {
            return false;
        }
    }



    public function getPhoto()
    {
        $path = Yii::getAlias('@frontend').'/web'.Yii::$app->params['userPhotoPath'];
        if (!empty($this->photo) && is_file($path.'/'.$this->photo)) {
            return  Yii::$app->params['userPhotoPath'].'/'.$this->photo;
        } else {
            return Yii::$app->params['userNoPhoto'];
        }
    }



    public function beforeSave($insert)
    {
        $this->birthday = $this->convertDate($this->birthday);
        $this->passportDate = $this->convertDate($this->passportDate);

        if (!empty($this->password) && $this->password == $this->passwordConfirm) {
            $this->password_hash = Yii::$app->security->generatePasswordHash($this->password);
            $this->auth_key = Yii::$app->security->generateRandomString();

        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    protected function convertDate($date)
    {
        if (preg_match('/(\d{2})\/(\d{2})\/(\d{4})/', $date, $arr) && isset($arr[1])  && isset($arr[2])  && isset($arr[3])) {
            return $arr[3] .'-'.$arr[2].'-'.$arr[1];
        }

        return $date;
    }
}
